{"name":"Stubby4net","tagline":"A small configurable server for stubbing external systems during development.","body":"stubby4net\r\n===========\r\n\r\n## Table of Contents\r\n\r\n* [Installation](#installation)\r\n* [Requirements](#requirements)\r\n* [Starting the Server(s)](#starting-the-servers)\r\n* [Command-line Switches](#command-line-switches)\r\n* [Endpoint Configuration](#endpoint-configuration)\r\n* [The Admin Portal](#the-admin-portal)\r\n* [The Stubs Portal](#the-stubs-portal)\r\n* [Programmatic API](#programmatic-api)\r\n* [Running Tests](#running-tests)\r\n* [See Also](#see-also)\r\n* [TODO](#todo)\r\n* [Wishful Thinkings](#wishful-thinkings)\r\n* [NOTES](#notes)\r\n\r\n## Installation\r\n\r\n### As a command-line tool via [Chocolatey](http://chocolatey.org/)\r\n\r\n    cinst stubby\r\n\r\nThis will install `stubby` as a command in your `PATH`.\r\n\r\n### As a project dependency via [NuGet](http://nuget.org/)\r\n\r\n    PM> Install-Package stubby\r\n\r\n## Requirements\r\n\r\n* .NET Framework 4+\r\n\r\nTesting with Mono has not been explicitly performed but adherence to Mono-compatible APIs was attempted.\r\n\r\n### Packaged\r\n\r\n* [YamlDotNet](https://github.com/aaubry/YamlDotNet) for loading yaml files.\r\n* [CommandLineParser](https://github.com/gsscoder/commandline) for handling cli arguments.\r\n\r\n### Optional (for development)\r\n\r\n* [NUnit](http://nunit.org)\r\n\r\n## Starting the Server(s)\r\n\r\nSome systems require you to `sudo` before running services on port certain ports (like 80)\r\n\r\n    [sudo] stubby\r\n\r\n## Command-line Switches\r\n\r\n```\r\nstubby [-a <port>] [-s <port>] [-t <port>]\r\n       [-l <hostname>] [-d <file>] [-v] [-w] [-m]\r\n\r\n-a, --admin <port>          Port for admin portal. Defaults to 8889.\r\n-s, --stubs <port>          Port for stubs portal. Defaults to 8882.\r\n-t, --tls <port>            Port for https stubs portal. Defaults to 7443.\r\n-l, --location <hostname>   Hostname at which to bind stubby.\r\n-d, --data <file>           Data file to pre-load endoints. YAML or JSON format.\r\n-w, --watch                 Auto-reload data file when edits are made.\r\n-m, --mute                  Prevent stubby from printing to the console.\r\n-v, --version               Prints stubby's version number.\r\n--help                      This help text.\r\n```\r\n\r\n## Endpoint Configuration\r\n\r\nThis section explains the usage, intent and behavior of each property on the `request` and `response` objects.\r\n\r\nHere is a fully-populated, unrealistic endpoint:\r\n```yaml\r\n-  request:\r\n      url: ^/your/awesome/endpoint$\r\n      method: POST\r\n      query:\r\n         exclamation: post requests can have query strings!\r\n      headers:\r\n         content-type: application/xml\r\n      post: >\r\n         <!xml blah=\"blah blah blah\">\r\n         <envelope>\r\n            <unaryTag/>\r\n         </envelope>\r\n      file: tryMyFirst.xml\r\n   response:\r\n      status: 200\r\n      latency: 5000\r\n      headers:\r\n         content-type: application/xml\r\n         server: stubbedServer/4.2\r\n      body: >\r\n         <!xml blah=\"blah blah blah\">\r\n         <responseXML>\r\n            <content></content>\r\n         </responseXML>\r\n      file: responseData.xml\r\n```\r\n\r\n### request\r\n\r\nThis object is used to match an incoming request to stubby against the available endpoints that have been configured.\r\n\r\n#### url (required)\r\n\r\n* is a full-fledged __regular expression__\r\n* This is the only required property of an endpoint.\r\n* signify the url after the base host and port (i.e. after `localhost:8882`).\r\n* must begin with ` / `.\r\n* any query paramters are stripped (so don't include them, that's what `query` is for).\r\n    * `/url?some=value&another=value` becomes `/url`\r\n* no checking is done for URI-encoding compliance.\r\n    * If it's invalid, it won't ever trigger a match.\r\n\r\nThis is the simplest you can get:\r\n```yaml\r\n-  request:\r\n      url: /\r\n```\r\n\r\nA demonstration using regular expressions:\r\n```yaml\r\n-  request:\r\n      url: ^/has/to/begin/with/this/\r\n\r\n-  request:\r\n      url: /has/to/end/with/this/$\r\n\r\n-  request:\r\n      url: ^/must/be/this/exactly/with/optional/trailing/slash/?$\r\n```\r\n\r\n#### method\r\n\r\n* defaults to `GET`.\r\n* case-insensitive.\r\n* can be any of the following:\r\n    * HEAD\r\n    * GET\r\n    * POST\r\n    * PUT\r\n    * POST\r\n    * DELETE\r\n    * etc.\r\n\r\n```yaml\r\n-  request:\r\n      url: /anything\r\n      method: GET\r\n```\r\n\r\n* it can also be an array of values.\r\n\r\n```yaml\r\n-  request:\r\n      url: /anything\r\n      method: [GET, HEAD]\r\n\r\n-  request:\r\n      url: ^/yonder\r\n      method:\r\n         -  GET\r\n         -  HEAD\r\n         -  POST\r\n```\r\n\r\n#### query\r\n\r\n* if ommitted, stubby ignores query parameters for the given url.\r\n* a yaml hashmap of variable/value pairs.\r\n* allows the query parameters to appear in any order in a uri\r\n\r\n* The following will match either of these:\r\n    * `/with/parameters?search=search+terms&filter=month`\r\n    * `/with/parameters?filter=month&search=search+terms`\r\n\r\n```yaml\r\n-  request:\r\n      url: ^/with/parameters$\r\n      query:\r\n         search: search terms\r\n         filter: month\r\n```\r\n\r\n#### post\r\n\r\n* if ommitted, any post data is ignored.\r\n* the body contents of the server request, such as form data.\r\n\r\n```yaml\r\n-  request:\r\n      url: ^/post/form/data$\r\n      post: name=John&email=john@example.com\r\n```\r\n\r\n#### file\r\n\r\n* if supplied, replaces `post` with the contents of the locally given file.\r\n    * paths are relative from where stubby was executed.\r\n* if the file is not found when the request is made, falls back to `post` for matching.\r\n* allows you to split up stubby data across multiple files\r\n\r\n```yaml\r\n-  request:\r\n      url: ^/match/against/file$\r\n      file: postedData.json\r\n      post: '{\"fallback\":\"data\"}'\r\n```\r\n\r\npostedData.json\r\n```json\r\n{\"fileContents\":\"match against this if the file is here\"}\r\n```\r\n\r\n* if `postedData.json` doesn't exist on the filesystem when `/match/against/file` is requested, stubby will match post contents against `{\"fallback\":\"data\"}` (from `post`) instead.\r\n\r\n#### headers\r\n\r\n* if ommitted, stubby ignores headers for the given url.\r\n* case-insensitive matching of header names.\r\n* a hashmap of header/value pairs similar to `query`.\r\n\r\nThe following endpoint only accepts requests with `application/json` post values:\r\n\r\n```yaml\r\n-  request:\r\n      url: /post/json\r\n      method: post\r\n      headers:\r\n         content-type: application/json\r\n```\r\n\r\n### response\r\n\r\nAssuming a match has been made against the given `request` object, data from `response` is used to build the stubbed response back to the client.\r\n\r\n#### status\r\n\r\n* the HTTP status code of the response.\r\n* integer or integer-like string.\r\n* defaults to `200`.\r\n\r\n```yaml\r\n-  request:\r\n      url: ^/im/a/teapot$\r\n      method: POST\r\n   response:\r\n      status: 420\r\n```\r\n\r\n#### body\r\n\r\n* contents of the response body\r\n* defaults to an empty content body\r\n\r\n```yaml\r\n-  request:\r\n      url: ^/give/me/a/smile$\r\n   response:\r\n      body: ':)'\r\n```\r\n\r\n#### file\r\n\r\n* similar to `request.file`, but the contents of the file are used as the `body`.\r\n\r\n```yaml\r\n-  request:\r\n      url: /\r\n   response:\r\n      file: extremelyLongJsonFile.json\r\n```\r\n\r\n#### headers\r\n\r\n* similar to `request.headers` except that these are sent back to the client.\r\n\r\n```yaml\r\n-  request:\r\n      url: ^/give/me/some/json$\r\n   response:\r\n      headers:\r\n         content-type: application/json\r\n      body: >\r\n         [{\r\n            \"name\":\"John\",\r\n            \"email\":\"john@example.com\"\r\n         },{\r\n            \"name\":\"Jane\",\r\n            \"email\":\"jane@example.com\"\r\n         }]\r\n```\r\n\r\n#### latency\r\n\r\n* time to wait, in milliseconds, before sending back the response\r\n* good for testing timeouts, or slow connections\r\n\r\n```yaml\r\n-  request:\r\n      url: ^/hello/to/jupiter$\r\n   response:\r\n      latency: 800000\r\n      body: Hello, World!\r\n```\r\n\r\n## The Admin Portal\r\n\r\nThe admin portal is a RESTful(ish) endpoint running on `localhost:8889`. Or wherever you described through stubby's options.\r\n\r\n### Supplying Endpoints to Stubby\r\n\r\nSubmit `POST` requests to `localhost:8889` or load a data-file (-d) with the following structure for each endpoint:\r\n\r\n* `request`: describes the client's call to the server\r\n   * `method`: GET/POST/PUT/DELETE/etc.\r\n   * `url`: the URI regex string. GET parameters should also be included inline here\r\n   * `query`: a key/value map of query string parameters included with the request\r\n   * `headers`: a key/value map of headers the server should respond to\r\n   * `post`: a string matching the textual body of the response.\r\n   * `file`: if specified, returns the contents of the given file as the request post. If the file cannot be found at request time, **post** is used instead\r\n* `response`: describes the server's response to the client\r\n   * `headers`: a key/value map of headers the server should use in it's response\r\n   * `latency`: the time in milliseconds the server should wait before responding. Useful for testing timeouts and latency\r\n   * `file`: if specified, returns the contents of the given file as the response body. If the file cannot be found at request time, **body** is used instead\r\n   * `body`: the textual body of the server's response to the client\r\n   * `status`: the numerical HTTP status code (200 for OK, 404 for NOT FOUND, etc.)\r\n\r\n#### YAML (file only)\r\n```yaml\r\n-  request:\r\n      url: ^/path/to/something$\r\n      method: POST\r\n      headers:\r\n         authorization: \"Basic usernamez:passwordinBase64\"\r\n      post: this is some post data in textual format\r\n   response:\r\n      headers:\r\n         Content-Type: application/json\r\n      latency: 1000\r\n      status: 200\r\n      body: You're request was successfully processed!\r\n\r\n-  request:\r\n      url: ^/path/to/anotherThing\r\n      query:\r\n         a: anything\r\n         b: more\r\n      method: GET\r\n      headers:\r\n         Content-Type: application/json\r\n      post:\r\n   response:\r\n      headers:\r\n         Content-Type: application/json\r\n         Access-Control-Allow-Origin: \"*\"\r\n      status: 204\r\n      file: path/to/page.html\r\n\r\n-  request:\r\n      url: ^/path/to/thing$\r\n      method: POST\r\n      headers:\r\n         Content-Type: application/json\r\n      post: this is some post data in textual format\r\n   response:\r\n      headers:\r\n         Content-Type: application/json\r\n      status: 304\r\n```\r\n\r\n#### JSON (file or POST/PUT)\r\n```json\r\n[\r\n  {\r\n    \"request\": {\r\n      \"url\": \"^/path/to/something$\", \r\n      \"post\": \"this is some post data in textual format\", \r\n      \"headers\": {\r\n         \"authorization\": \"Basic usernamez:passwordinBase64\"\r\n      },\r\n      \"method\": \"POST\"\r\n    }, \r\n    \"response\": {\r\n      \"status\": 200, \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      \"latency\": 1000,\r\n      \"body\": \"You're request was successfully processed!\"\r\n    }\r\n  }, \r\n  {\r\n    \"request\": {\r\n      \"url\": \"^/path/to/anotherThing\", \r\n      \"query\": {\r\n         \"a\": \"anything\",\r\n         \"b\": \"more\"\r\n      },\r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      \"post\": null, \r\n      \"method\": \"GET\"\r\n    }, \r\n    \"response\": {\r\n      \"status\": 204, \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      }, \r\n      \"file\": \"path/to/page.html\"\r\n    }\r\n  }, \r\n  {\r\n    \"request\": {\r\n      \"url\": \"^/path/to/thing$\",\r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      \"post\": \"this is some post data in textual format\", \r\n      \"method\": \"POST\"\r\n    }, \r\n    \"response\": {\r\n      \"status\": 304, \r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      } \r\n    }\r\n  }\r\n]\r\n```\r\n\r\nIf you want to load more than one endpoint via file, use either a JSON array or YAML list (-) syntax. On success, the response will contain `Location` in the header with the newly created resources' location\r\n\r\n### Getting the Current List of Stubbed Endpoints\r\n\r\nPerforming a `GET` request on `localhost:8889` will return a JSON array of all currently saved responses. It will reply with `204 : No Content` if there are none saved.\r\n\r\nPerforming a `GET` request on `localhost:8889/<id>` will return the JSON object representing the response with the supplied id.\r\n\r\n#### The Status Page\r\n\r\nYou can also view the currently configured endpoints by going to `localhost:8889/status`\r\n\r\n### Changing Existing Endpoints\r\n\r\nPerform `PUT` requests in the same format as using `POST`, only this time supply the id in the path. For instance, to update the response with id 4 you would `PUT` to `localhost:8889/4`.\r\n\r\n### Deleting Endpoints\r\n\r\nSend a `DELETE` request to `localhost:8889/<id>`\r\n\r\n## The Stubs Portal\r\n\r\nRequests sent to any url at `localhost:8882` (or wherever you told stubby to run) will search through the available endpoints and, if a match is found, respond with that endpoint's `response` data\r\n\r\n### How Endpoints Are Matched\r\n\r\nFor a given endpoint, stubby only cares about matching the properties of the request that have been defined in the YAML. The exception to this rule is `method`; if it is omitted it is defaulted to `GET`.\r\n\r\nFor instance, the following will match any `POST` request to the root url:\r\n\r\n```yaml\r\n-  request:\r\n      url: /\r\n      method: POST\r\n   response: {}\r\n```\r\n\r\nThe request could have any headers and any post body it wants. It will match the above.\r\n\r\nPseudocode:\r\n\r\n```\r\nfor each <endpoint> of stored endpoints {\r\n\r\n   for each <property> of <endpoint> {\r\n      if <endpoint>.<property> != <incoming request>.<property>\r\n         next endpoint\r\n   }\r\n\r\n   return <endpoint>\r\n}\r\n```\r\n\r\n## Programmatic API\r\n\r\n### The Stubby module\r\n\r\nAdd `stubby` as a reference within your project:\r\n\r\n```\r\n    PM> Install-Package stubby\r\n```\r\n\r\n## See Also\r\n\r\n* **[stubby4node](https://github.com/mrak/stubby4node):** A node.js implementation of stubby\r\n* **[stubby4j](https://github.com/azagniotov/stubby4j):** A java implementation of stubby\r\n\r\n## TODO\r\n\r\n* `post` parameter as a hashmap under `request` for easy form-submission value matching\r\n\r\n## NOTES\r\n\r\n* __Copyright__ 2013 Eric Mrak, Alexander Zagniotov\r\n* __License__ Apache v2.0\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}